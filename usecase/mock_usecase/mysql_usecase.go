// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/mysql_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	models "github.com/YasushiKobayashi/dump/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMysqlRepository is a mock of MysqlRepository interface
type MockMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlRepositoryMockRecorder
}

// MockMysqlRepositoryMockRecorder is the mock recorder for MockMysqlRepository
type MockMysqlRepositoryMockRecorder struct {
	mock *MockMysqlRepository
}

// NewMockMysqlRepository creates a new mock instance
func NewMockMysqlRepository(ctrl *gomock.Controller) *MockMysqlRepository {
	mock := &MockMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMysqlRepository) EXPECT() *MockMysqlRepositoryMockRecorder {
	return m.recorder
}

// GetDump mocks base method
func (m *MockMysqlRepository) GetDump() (*models.MysqlModel, error) {
	ret := m.ctrl.Call(m, "GetDump")
	ret0, _ := ret[0].(*models.MysqlModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDump indicates an expected call of GetDump
func (mr *MockMysqlRepositoryMockRecorder) GetDump() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDump", reflect.TypeOf((*MockMysqlRepository)(nil).GetDump))
}

// GetSync mocks base method
func (m *MockMysqlRepository) GetSync() (*models.MysqlModel, error) {
	ret := m.ctrl.Call(m, "GetSync")
	ret0, _ := ret[0].(*models.MysqlModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSync indicates an expected call of GetSync
func (mr *MockMysqlRepositoryMockRecorder) GetSync() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSync", reflect.TypeOf((*MockMysqlRepository)(nil).GetSync))
}

// UploadDump mocks base method
func (m *MockMysqlRepository) UploadDump(arg0 *models.MysqlModel) error {
	ret := m.ctrl.Call(m, "UploadDump", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadDump indicates an expected call of UploadDump
func (mr *MockMysqlRepositoryMockRecorder) UploadDump(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadDump", reflect.TypeOf((*MockMysqlRepository)(nil).UploadDump), arg0)
}

// UploadSync mocks base method
func (m *MockMysqlRepository) UploadSync(arg0 *models.MysqlModel) error {
	ret := m.ctrl.Call(m, "UploadSync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadSync indicates an expected call of UploadSync
func (mr *MockMysqlRepositoryMockRecorder) UploadSync(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSync", reflect.TypeOf((*MockMysqlRepository)(nil).UploadSync), arg0)
}

// MockLocalRepository is a mock of LocalRepository interface
type MockLocalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLocalRepositoryMockRecorder
}

// MockLocalRepositoryMockRecorder is the mock recorder for MockLocalRepository
type MockLocalRepositoryMockRecorder struct {
	mock *MockLocalRepository
}

// NewMockLocalRepository creates a new mock instance
func NewMockLocalRepository(ctrl *gomock.Controller) *MockLocalRepository {
	mock := &MockLocalRepository{ctrl: ctrl}
	mock.recorder = &MockLocalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocalRepository) EXPECT() *MockLocalRepositoryMockRecorder {
	return m.recorder
}

// Upload mocks base method
func (m *MockLocalRepository) Upload(arg0 string, arg1 models.Path) error {
	ret := m.ctrl.Call(m, "Upload", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (mr *MockLocalRepositoryMockRecorder) Upload(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockLocalRepository)(nil).Upload), arg0, arg1)
}

// MockAwsS3Repository is a mock of AwsS3Repository interface
type MockAwsS3Repository struct {
	ctrl     *gomock.Controller
	recorder *MockAwsS3RepositoryMockRecorder
}

// MockAwsS3RepositoryMockRecorder is the mock recorder for MockAwsS3Repository
type MockAwsS3RepositoryMockRecorder struct {
	mock *MockAwsS3Repository
}

// NewMockAwsS3Repository creates a new mock instance
func NewMockAwsS3Repository(ctrl *gomock.Controller) *MockAwsS3Repository {
	mock := &MockAwsS3Repository{ctrl: ctrl}
	mock.recorder = &MockAwsS3RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAwsS3Repository) EXPECT() *MockAwsS3RepositoryMockRecorder {
	return m.recorder
}

// Upload mocks base method
func (m *MockAwsS3Repository) Upload(arg0 string, arg1 models.Path, arg2 models.AwsS3Param) error {
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload
func (mr *MockAwsS3RepositoryMockRecorder) Upload(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockAwsS3Repository)(nil).Upload), arg0, arg1, arg2)
}
